// Mocks generated by Mockito 5.4.0 from annotations
// in sleep/test/domain/usecases/start_sleep_tracking_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sleep/domain/entities/sleep_session.dart' as _i2;
import 'package:sleep/domain/repositories/sleep_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSleepSession_0 extends _i1.SmartFake implements _i2.SleepSession {
  _FakeSleepSession_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SleepRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSleepRepository extends _i1.Mock implements _i3.SleepRepository {
  MockSleepRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SleepSession> startSession(_i2.SleepSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #startSession,
          [session],
        ),
        returnValue: _i4.Future<_i2.SleepSession>.value(_FakeSleepSession_0(
          this,
          Invocation.method(
            #startSession,
            [session],
          ),
        )),
      ) as _i4.Future<_i2.SleepSession>);

  @override
  _i4.Future<_i2.SleepSession> endSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #endSession,
          [sessionId],
        ),
        returnValue: _i4.Future<_i2.SleepSession>.value(_FakeSleepSession_0(
          this,
          Invocation.method(
            #endSession,
            [sessionId],
          ),
        )),
      ) as _i4.Future<_i2.SleepSession>);

  @override
  _i4.Future<_i2.SleepSession?> getActiveSession() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSession,
          [],
        ),
        returnValue: _i4.Future<_i2.SleepSession?>.value(),
      ) as _i4.Future<_i2.SleepSession?>);

  @override
  _i4.Future<_i2.SleepSession?> getSessionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionById,
          [id],
        ),
        returnValue: _i4.Future<_i2.SleepSession?>.value(),
      ) as _i4.Future<_i2.SleepSession?>);

  @override
  _i4.Future<List<_i2.SleepSession>> getSessions({
    DateTime? from,
    DateTime? to,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessions,
          [],
          {
            #from: from,
            #to: to,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.SleepSession>>.value(<_i2.SleepSession>[]),
      ) as _i4.Future<List<_i2.SleepSession>>);

  @override
  _i4.Future<void> deleteSession(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSession(_i2.SleepSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
