// Mocks generated by Mockito 5.4.0 from annotations
// in sleep/test/presentation/providers/user_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i6;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sleep/domain/entities/user_profile.dart' as _i4;
import 'package:sleep/domain/repositories/user_repository.dart' as _i2;
import 'package:sleep/services/notification_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i2.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.UserProfile?> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i3.Future<_i4.UserProfile?>.value(),
      ) as _i3.Future<_i4.UserProfile?>);

  @override
  _i3.Future<void> saveUserProfile(_i4.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserProfile,
          [profile],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updatePoints(int? points) => (super.noSuchMethod(
        Invocation.method(
          #updatePoints,
          [points],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> unlockAchievement(String? achievementId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlockAchievement,
          [achievementId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i5.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> requestPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> scheduleBedtimeReminder({
    required _i6.TimeOfDay? bedtime,
    required int? reminderMinutes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleBedtimeReminder,
          [],
          {
            #bedtime: bedtime,
            #reminderMinutes: reminderMinutes,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleWakeUpAlarm({
    required _i6.TimeOfDay? wakeTime,
    required bool? enabled,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleWakeUpAlarm,
          [],
          {
            #wakeTime: wakeTime,
            #enabled: enabled,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> showSleepQualityNotification({
    required double? qualityScore,
    required Duration? sleepDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showSleepQualityNotification,
          [],
          {
            #qualityScore: qualityScore,
            #sleepDuration: sleepDuration,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleWeeklyReport() => (super.noSuchMethod(
        Invocation.method(
          #scheduleWeeklyReport,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllNotifications,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.PendingNotificationRequest>> getPendingNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingNotifications,
          [],
        ),
        returnValue: _i3.Future<List<_i7.PendingNotificationRequest>>.value(
            <_i7.PendingNotificationRequest>[]),
      ) as _i3.Future<List<_i7.PendingNotificationRequest>>);
}
